const User = require("../models/user");
const Dipendenti = require("../models/dipendenti");
const express = require("express");
const redis = require("redis");
const { ObjectId } = require("bson");

const router = express.Router();
//const redisPort = process.env.REDISPORT || 6379;
//const redisHost = process.env.REDISHOST || "redis";
//const redisDisabled = process.env.REDISDISABLE === "true" || false;
const redisTimeCache = parseInt(process.env.REDISTTL) || 60;
//const client = redis.createClient(redisPort, redisHost);

router.get("/", async (req, res) => {
  try {
    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");

    const getData = () => {
      return Dipendenti.find();
    };
 
    if (redisClient == undefined || redisDisabled) {
      const dipendenti = await getData();
      res.status(200).json(dipendenti);
      return
    }

    const searchTerm = `DIPENDENTIALL`;
    // Ricerca su Redis Cache
    redisClient.get(searchTerm, async (err, data) => {
      if (err) throw err;

      if (data) {
        // Dato trovato in cache - ritorna il json
        res.status(200).send(JSON.parse(data));
      } else {
        // Recupero informazioni dal mongodb
        const dipendenti = await getData();

        // Aggiorno la cache con i dati recuperati da mongodb
        redisClient.setex(searchTerm, redisTimeCache, JSON.stringify(dipendenti));

        // Ritorna il json
        res.status(200).json(dipendenti);
      }
    });
  } catch (err) {
    console.error("Error: ", err);
    res.status(500).json({ Error: err });
  }
});

// http://[HOST]:[PORT]/api/dipendenti/[ID_DIPENDENTE]
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  try {
    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");

    const getData = () => {
      return Dipendenti.findById(id);
    };
 
    if (redisClient == undefined || redisDisabled) {
      const dipendenti = await getData();
      res.status(200).json(dipendenti);
      return
    }

    const searchTerm = `DIPENDENTIBY${id}`;
    redisClient.get(searchTerm, async (err, data) => {
      if (err) throw err;

      if (data && !redisDisabled) {
        res.status(200).send(JSON.parse(data));
      } else {
        const dipendenti = await getData();

        redisClient.setex(searchTerm, redisTimeCache, JSON.stringify(dipendenti));
        res.status(200).json(dipendenti);
      }
    });
  } catch (err) {
    res.status(500).json({ Error: err });
  }
});


// http://[HOST]:[PORT]/api/dipendenti/byuser/[ID_USER]
router.get("/byuser/:id", async (req, res) => {
  const { id } = req.params;
  try {
    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");

    const getData = () => {
        return Dipendenti.find(
            { _id: id }
      );
    };
 
    if (redisClient == undefined || redisDisabled) {
      const dipendenti = await getData();
      res.status(200).json(dipendenti);
      return
    }

    const searchTerm = `DIPENDENTIBY${id}`;
    redisClient.get(searchTerm, async (err, data) => {
      if (err) throw err;

      if (data && !redisDisabled) {
        res.status(200).send(JSON.parse(data));
      } else {
        const dipendenti = await getData();

        redisClient.setex(searchTerm, redisTimeCache, JSON.stringify(dipendenti));
        res.status(200).json(dipendenti);
      }
    });
  } catch (err) {
    res.status(500).json({ Error: err });
  }
});


// http://[HOST]:[PORT]/api/dipendenti (POST)
// INSERT dipendente su DB
router.post("/", async (req, res) => {
  try {

    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");
    clientMailerService = req.app.get("mailer");
    clientMailerTopic = req.app.get("mailerTopic");
    clientMailerDiabled = req.app.get("mailerDisabled");

      const newDip = req.body.dipendente;
      console.log("id: ",req.body.dipendente.id);
      console.log("_id: ",req.body.dipendente._id);
    if (newDip.email === undefined) {
      res.status(400).json({ Error: 'Email not defined'})
      return;
    }
    if (newDip.mansione === undefined) {
      res.status(400).json({ Error: 'Mansione not defined'})
      return;
      }
      
    passwordAutoGenerated = 
      `${newDip.email + new Date().getUTCSeconds().toString() + Math.random() * 100}`;

    
      const dipendente = new Dipendenti(newDip);
    // Salva i dati sul mongodb
      const result = await dipendente.save();
      console.log("DipID= ", result._id);
      const user = new User({
          username: newDip.email,
          password: passwordAutoGenerated,
          active: false,
          role: newDip.mansione,
          dipendenteID: result._id
      });
      console.log("User.DipendenteID= ", user.dipendenteID);
      const userResult = await user.save();
    console.log("Inserimento Dipendente User: ", userResult);
    console.log("Inserimento Dipendente: ", result);

    if (redisClient != undefined && redisDisabled) {
      const searchTermUser = `USERALL`;
      redisClient.del(searchTermUser);
      const searchTerm = `DIPENDENTIALL`;
      redisClient.del(searchTerm);
    }

    if (clientMailerService != undefined && !clientMailerDiabled) {
      clientMailerService.publish( clientMailerTopic, 
        JSON.stringify({
          message: dipendente,
          operation: "insert",
        }),
        { qos: 0, retain: false },
        (error) => {
          if (error) {
            console.error(error);
          }
      });
    }

    res.status(200);
    res.json(result);
  } catch (err) {
    res.status(500);
    res.json({ Error: err });
  }
});

// http://[HOST]:[PORT]/api/dipendenti/[ID_DIPENDENTE]
// Modifica del dipendente
router.put("/:id", async (req, res) => {
  try {
    const { id } = req.params;

    console.log('accettatoRegolamento: ' + req.body.dipendente.accettatoRegolamento);
      console.log('idUser: ' + req.body.dipendente.idUser);
    // Aggiorna il documento su mongodb
    const dipendenti = await Dipendenti.updateOne(
      { _id: id },
      {
        $set: req.body.dipendente,
      }
    );
    
    console.log("Update Dipendente: ", dipendenti);
    console.log("Update Dipendente User:",
      await User.updateOne(
        { _id: req.body.dipendente.idUser },
        {
          $set: {
            role: req.body.dipendente.mansione
          },
        }
      )
    );
    
    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");
    clientMailerService = req.app.get("mailer");
    clientMailerTopic = req.app.get("mailerTopic");
    clientMailerDiabled = req.app.get("mailerDisabled");

    if (redisClient != undefined && !redisDisabled) {
      const searchTerm = `DIPENDENTIBY${id}`;
      redisClient.del(searchTerm);

      redisClient.del(`MENU*`);
    }

    if (clientMailerService != undefined && !clientMailerDiabled) {
      clientMailerService.publish(
        clientMailerTopic,
        JSON.stringify({
          message: dipendenti,
          operation: "update",
        }),
        { qos: 0, retain: false },
        (error) => {
          if (error) {
            console.error(error);
          }
        });
    }

    res.status(200).json(dipendenti);
  } catch (err) {
    res.status(500).json({ Error: err });
  }
});

router.delete("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const dipendente = await Dipendenti.remove({ _id: id });

    redisClient = req.app.get("redis");
    redisDisabled = req.app.get("redisDisabled");
    clientMailerService = req.app.get("mailer");
    clientMailerTopic = req.app.get("mailerTopic");
    clientMailerDiabled = req.app.get("mailerDisabled");

    if (redisClient != undefined && !redisDisabled) {
      let searchTerm = `DIPENDENTEBY${id}`;
      redisClient.del(searchTerm);
      searchTerm = `DIPENDENTE${id}`;
      redisClient.del(searchTerm);
    }

    if (clientMailerService != undefined && !clientMailerDiabled) {

      clientMailerService.publish(
        clientMailerTopic,
        JSON.stringify({
          message: dipendente,
          operation: "remove",
        }),
        { qos: 0, retain: false },
        (error) => {
          if (error) {
            console.error(error);
          }
        });
    }

    res.status(200);
    res.json(dipendente);
  } catch (err) {
    res.status(500).json({ Error: err });
  }
});

module.exports = router;
