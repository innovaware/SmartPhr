const User = require("../models/user");
const Dipendenti = require("../models/dipendenti");
const express = require("express");
const redis = require("redis");
const { ObjectId } = require("bson");
const bcrypt = require('bcrypt');
const router = express.Router();
const Log = require("../models/log");
//const redisPort = process.env.REDISPORT || 6379;
//const redisHost = process.env.REDISHOST || "redis";
//const redisDisabled = process.env.REDISDISABLE === "true" || false;
const redisTimeCache = parseInt(process.env.REDISTTL) || 60;
//const client = redis.createClient(redisPort, redisHost);

router.get("/", async (req, res) => {
    try {
        const getData = () => {
            return Dipendenti.find();
        };

        // Directly fetch data from MongoDB
        const dipendenti = await getData();
        res.status(200).json(dipendenti);
    } catch (err) {
        console.error("Error: ", err);
        res.status(500).json({ Error: err });
    }
});


// http://[HOST]:[PORT]/api/dipendenti/[ID_DIPENDENTE]
router.get("/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const getData = () => {
            return Dipendenti.findById(id);
        };

        const dipendenti = await getData();
        res.status(200).json(dipendenti);
    } catch (err) {
        res.status(500).json({ Error: err });
    }
});



// http://[HOST]:[PORT]/api/dipendenti/byuser/[ID_USER]
router.get("/byuser/:id", async (req, res) => {
    const { id } = req.params;
    try {
        // Funzione per ottenere i dati dal database
        const getData = async () => {
            return await Dipendenti.find({ _id: id });
        };

        // Ottieni i dati dal database
        const dipendenti = await getData();

        // Invia i dati come risposta
        res.status(200).json(dipendenti);
    } catch (err) {
        // Gestione degli errori
        res.status(500).json({ Error: err.message });
    }
});


async function codificaPassword(password) {
    const saltRounds = 12;
    try {
        // Codifica della password
        const hash = await bcrypt.hash(password, saltRounds);
        return hash;
    } catch (err) {
        console.error("Errore nella codifica della password:", err);
        throw err; // Rilancia l'errore per essere gestito nel chiamante
    }
}

// http://[HOST]:[PORT]/api/dipendenti (POST)
// INSERT dipendente su DB
router.post("/", async (req, res) => {
    try {
        const newDip = req.body.dipendente;

        if (!newDip.email || !newDip.mansione) {
            return res.status(400).json({ Error: 'Email or Mansione not defined' });
        }

        // Genera e codifica la password
        const passwordAutoGenerated = `${newDip.email + new Date().getUTCSeconds().toString() + Math.random() * 100}`;
        const pwd = await codificaPassword(passwordAutoGenerated); // Attendi la codifica della password

        // Crea e salva il nuovo dipendente
        const dipendente = new Dipendenti(newDip);
        const result = await dipendente.save();

        // Crea e salva il nuovo utente
        const user = new User({
            username: newDip.email,
            password: pwd,
            active: false,
            role: newDip.mansione,
            dipendenteID: result._id,
            firma: result.nome + " " + result.cognome
        });
        const userResult = await user.save();

        // Mailer
        const clientMailerService = req.app.get("mailer");
        const clientMailerTopic = req.app.get("mailerTopic");
        const clientMailerDisabled = req.app.get("mailerDisabled");
        if (clientMailerService && !clientMailerDisabled) {
            clientMailerService.publish(clientMailerTopic, JSON.stringify({
                message: dipendente,
                operation: "insert",
            }), { qos: 0, retain: false }, (error) => {
                if (error) {
                    console.error("Errore nella pubblicazione sul mailer:", error);
                }
            });
        }

        const usr = res.locals.auth;

        const getDipendente = () => {
            return Dipendenti.findById(usr.dipendenteID);
        };

        const dip = await getDipendente();

        const log = new Log({
            data: new Date(),
            operatore: dip.nome + " " + dip.cognome,
            operatoreID: usr.dipendenteID,
            className: "Dipendente",
            operazione: "Inserimento dipendente: " + dipendente.cognome + " " + dipendente.nome,
        });
        console.log("log: ", log);
        const resultLog = await log.save();

        res.status(200).json(result);
    } catch (err) {
        console.error("Errore durante l'inserimento del dipendente:", err);
        res.status(500).json({ Error: err.message || 'Errore interno del server' });
    }
});



// http://[HOST]:[PORT]/api/dipendenti/[ID_DIPENDENTE]
// Modifica del dipendente
router.put("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const { dipendente } = req.body;

        console.log('accettatoRegolamento: ' + dipendente.accettatoRegolamento);
        console.log('idUser: ' + dipendente.idUser);

        // Aggiorna il documento su mongodb
        const dipendenti = await Dipendenti.updateOne(
            { _id: id },
            { $set: dipendente }
        );

        console.log("Update Dipendente: ", dipendenti);

        // Aggiorna il documento dell'utente associato
        console.log("Update Dipendente User:",
            await User.updateOne(
                { dipendenteID: dipendente._id },
                { $set: { role: dipendente.mansione } }
            )
        );

        const usr = res.locals.auth;

        const getDipendente = () => {
            return Dipendenti.findById(usr.dipendenteID);
        };

        const dip = await getDipendente();

        const log = new Log({
            data: new Date(),
            operatore: dip.nome + " " + dip.cognome,
            operatoreID: usr.dipendenteID,
            className: "Dipendente",
            operazione: "Modifica dipendente: " + dipendente.cognome + " " + dipendente.nome,
        });
        console.log("log: ", log);
        const resultLog = await log.save();

        // Rispondi con il risultato dell'aggiornamento
        res.status(200).json(dipendenti);
    } catch (err) {
        res.status(500).json({ Error: err });
    }
});


router.delete("/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const dipendente = await Dipendenti.remove({ _id: id });

        redisClient = req.app.get("redis");
        redisDisabled = req.app.get("redisDisabled");
        clientMailerService = req.app.get("mailer");
        clientMailerTopic = req.app.get("mailerTopic");
        clientMailerDiabled = req.app.get("mailerDisabled");

        if (redisClient != undefined && !redisDisabled) {
            let searchTerm = `DIPENDENTEBY${id}`;
            redisClient.del(searchTerm);
            searchTerm = `DIPENDENTE${id}`;
            redisClient.del(searchTerm);
        }

        if (clientMailerService != undefined && !clientMailerDiabled) {

            clientMailerService.publish(
                clientMailerTopic,
                JSON.stringify({
                    message: dipendente,
                    operation: "remove",
                }),
                { qos: 0, retain: false },
                (error) => {
                    if (error) {
                        console.error(error);
                    }
                });
        }

        const usr = res.locals.auth;

        const getDipendente = () => {
            return Dipendenti.findById(usr.dipendenteID);
        };

        const dip = await getDipendente();

        const log = new Log({
            data: new Date(),
            operatore: dip.nome + " " + dip.cognome,
            operatoreID: usr.dipendenteID,
            className: "Dipendente",
            operazione: "Eliminazione dipendente: " + dipendente.cognome + " " + dipendente.nome,
        });
        console.log("log: ", log);
        const resultLog = await log.save();

        res.status(200);
        res.json(dipendente);
    } catch (err) {
        res.status(500).json({ Error: err });
    }
});

module.exports = router;
